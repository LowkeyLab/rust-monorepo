//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use super::sea_orm_active_enums::GameState;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "games")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub state: GameState,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::game_players::Entity")]
    GamePlayers,
    #[sea_orm(has_many = "super::round_guesses::Entity")]
    RoundGuesses,
    #[sea_orm(has_many = "super::rounds::Entity")]
    Rounds,
}

impl Related<super::game_players::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GamePlayers.def()
    }
}

impl Related<super::rounds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rounds.def()
    }
}

impl Related<super::round_guesses::Entity> for Entity {
    fn to() -> RelationDef {
        super::game_players::Relation::RoundGuesses.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::game_players::Relation::Games.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
