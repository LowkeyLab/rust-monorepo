//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "round_guesses")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub game_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub round_number: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub player_name: String,
    pub guess: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::game_players::Entity",
        from = "(Column::GameId, Column::PlayerName)",
        to = "(super::game_players::Column::GameId, super::game_players::Column::Name)",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    GamePlayers,
    #[sea_orm(
        belongs_to = "super::games::Entity",
        from = "Column::GameId",
        to = "super::games::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Games,
}

impl Related<super::game_players::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GamePlayers.def()
    }
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        super::game_players::Relation::Games.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::game_players::Relation::RoundGuesses.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
